/**
 * @fileOverview 服务器入口
 * @author Max
 **/

/* jshint -W030 */
import express from 'express';
import React from 'react';
import url from 'url';
import {match, RoutingContext} from 'react-router';
import _importLess from '../utils/less-loader';
import Root from '../bootstrap/root';
import DevTools from '../bootstrap/devtools';
import {routes, HTMLWrapRoutes, PageInitialData} from '../../routes';
import {Provider} from 'react-redux';
import HTMLWrap from '../bootstrap/wrap';
import {default as config, getInjectGlobalVar} from './config';
import {compose, createStore, applyMiddleware} from 'redux';
import APP from '../../reducer/app';
import {devTools} from 'redux-devtools';
import createLocation from 'history/lib/createLocation';
import ValidatorMiddleware from 'redux-validator';
import HTTPHelper from '../utils/http-helper';
global.httpHelper = new HTTPHelper({
    hostname: config.getIn(['API_SERVER', 'HOSTNAME']),
    port: config.getIn(['API_SERVER', 'PORT']),
    stubHostname: config.getIn(['STUB_SERVER', 'HOSTNAME']),
    stubPort: config.getIn(['STUB_SERVER', 'PORT'])
});
import Immutable from 'immutable';
import fs from 'fs';
import path from 'path';

var app = express();

app.use('/' + config.get('DIST_PATH'), express.static(config.get('DIST_PATH')));

app.all('/stub/*', (req, res) => {

    const urlObj = url.parse(req.url);

    let stubFilePath = path.join(process.cwd(), config.getIn(['STUB_SERVER', 'FILE_DIR']), urlObj.path.substr(6, urlObj.path.length - 6).split('/').join('.') + '.json');
    let content;
    try{
        content = JSON.parse(fs.readFileSync(stubFilePath, 'utf-8'));
    } catch(e) {
        content = {
            flag: false,
            message: '404 not found'
        };
    }

    res.json(content);
});

app.get('*', (req, res, next) => {

    const urlObj = url.parse(req.url);

    if(urlObj.path.substr(0, 5) !== '/' + config.get('DIST_PATH') &&
       urlObj.path.substr(0, 5) !== '/stub' &&
       urlObj.path.indexOf('favicon.ico') === -1) {
        match({
            routes,
            location: createLocation(urlObj.path)
        }, (error, redirectLocation, renderProps) => {
            if(redirectLocation) {
                 res.redirect(301, redirectLocation.pathname + redirectLocation.search);
            } else if(error) {
                res.status(500).send(error.message);
            } else if(renderProps === null) {
                res.status(404).send('Not found');
            } else {
                res.setHeader('Content-Type', 'text/html');
                let wrap = new HTMLWrap();
                HTMLWrapRoutes[urlObj.pathname] && HTMLWrapRoutes[urlObj.pathname](wrap);

                let globalVars = getInjectGlobalVar(req);

                const finalCreateStore = process.env.NODE_ENV === 'production' ? compose(
                    applyMiddleware(ValidatorMiddleware())
                )(createStore) : compose(
                    applyMiddleware(ValidatorMiddleware()),
                    devTools()
                )(createStore);

                PageInitialData[urlObj.pathname] && PageInitialData[urlObj.pathname]({}, (initialState) => {

                    let initialStateImmutable = {};
                    for(let i in initialState) {
                        initialStateImmutable[i] = Immutable.fromJS(initialState[i]);
                    }
                    const store = finalCreateStore(APP, initialStateImmutable);

                    globalVars.__INITIAL_STATE__ = JSON.stringify(initialState);

                    wrap.injectGlobalVar(globalVars);

                    let html = React.renderToString(
                        <div>
                            <Provider store={store}>
                                {() => <RoutingContext {...renderProps} />}
                            </Provider>
                            <DevTools store={store}/>
                        </div>
                    );

                    html = wrap.getHead() + html + wrap.getBottom();
                    res.send(html);
                    res.end();
                });
            }
        });

    } else {
        next();
    }

});



app.listen(config.get('PORT'));
console.log(`listen to ${config.get('PORT')}`);
