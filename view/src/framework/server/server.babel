/**
 * @fileOverview 服务器入口
 * @author Max
 **/

/* jshint -W030 */
import express from 'express';
import React from 'react';
import url from 'url';
import _importLess from '../utils/less-loader';
import Router from 'react-router';
import {routes, HTMLWrapRoutes, PageInitialData} from '../../routes';
import HTMLWrap from '../bootstrap/wrap';
import {default as config, getInjectGlobalVar} from './config';
import {compose, createStore, applyMiddleware} from 'redux';
import APP from '../../reducer/app';
import {devTools} from 'redux-devtools';
import ValidatorMiddleware from 'redux-validator';
import HTTPHelper from '../utils/http-helper';
global.httpHelper = new HTTPHelper({
    hostname: config.getIn(['API_SERVER', 'HOSTNAME']),
    port: config.getIn(['API_SERVER', 'PORT']),
    stubHostname: config.getIn(['STUB_SERVER', 'HOSTNAME']),
    stubPort: config.getIn(['STUB_SERVER', 'PORT'])
});
import Immutable from 'immutable';
import fs from 'fs';
import path from 'path';

var app = express();

app.use('/' + config.get('DIST_PATH'), express.static(config.get('DIST_PATH')));

app.all('/stub/*', (req, res) => {

    const urlObj = url.parse(req.url);

    let stubFilePath = path.join(process.cwd(), config.getIn(['STUB_SERVER', 'FILE_DIR']), urlObj.path.substr(6, urlObj.path.length - 6).split('/').join('.') + '.json');
    let content;
    try{
        content = JSON.parse(fs.readFileSync(stubFilePath, 'utf-8'));
    } catch(e) {
        content = {
            flag: false,
            message: '404 not found'
        };
    }

    res.json(content);
});

app.get('*', (req, res, next) => {

    const urlObj = url.parse(req.url);

    if(urlObj.path.substr(0, 5) !== '/' + config.get('DIST_PATH') &&
       urlObj.path.substr(0, 5) !== '/stub' &&
       urlObj.path.indexOf('favicon.ico') === -1) {
        Router.run(routes, urlObj.path, (Root, state) => {
            console.log('new request ', req.url);
            res.setHeader('Content-Type', 'text/html');
            let wrap = new HTMLWrap();
            HTMLWrapRoutes[state.path] && HTMLWrapRoutes[state.path](wrap);

            let globalVars = getInjectGlobalVar(req);

            const finalCreateStore = process.env.NODE_ENV === 'production' ? compose(
                applyMiddleware(ValidatorMiddleware())
            )(createStore) : compose(
                applyMiddleware(ValidatorMiddleware()),
                devTools()
            )(createStore);

            PageInitialData[state.path] && PageInitialData[state.path]({}, (initialState) => {

                let initialStateImmutable = {};
                for(let i in initialState) {
                    initialStateImmutable[i] = Immutable.fromJS(initialState[i]);
                }
                const store = finalCreateStore(APP, initialStateImmutable);

                globalVars.__INITIAL_STATE__ = JSON.stringify(initialState);

                wrap.injectGlobalVar(globalVars);

                const devToolsStyle = globalVars.__PHONE__ ? {maxWidth:'90%'} : {};

                const props = {
                    store,
                    routerState: state,
                    devToolsStyle,
                    visibleOnLoad: false
                };

                let html = React.renderToString(
                    <Root {...props}/>
                );

                html = wrap.getHead() + html + wrap.getBottom();
                res.send(html);
                res.end();
            });
        });
    } else {
        next();
    }

});



app.listen(config.get('PORT'));
console.log(`listen to ${config.get('PORT')}`);
