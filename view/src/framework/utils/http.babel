/**
 * @fileOverview server-side http 请求, 产出Promise
 *               自动解析JSON数据，服务器返回的数据结构顶层为{result_code: int(0为成功，其余为错误码), data/error}
 *               附带桩方法
 * @author Max
 */

import http from 'http';
import querystring from 'querystring';
import URL from 'url';

export default class HTTP {
    constructor({hostname, port, stubHostname, stubPort}) {
        this._hostname = hostname;
        this._port = port;
        this._stubHostname = stubHostname;
        this._stubPort = stubPort;
    }
    get(url) {
        return this._getPromise(this._urlFilter(url));
    }
    getStub(url) {
        return this._getPromise(this._urlStubFilter(url));
    }
    _getPromise(url) {
        return new Promise((resolve, reject) => {
            console.log('new HTTP GET:', url);
            http.get(url, (res) => {
                resHandler(res, resolve, reject);
            }).on('error', reject);
        });
    }
    post(url, content) {
        return this._postPromise(this._urlFilter(url), content);
    }
    postStub(options, data) {
        return this._postPromise(this._urlStubFilter(url), content);
    }
    _postPromise(url, content) {
        const _content = querystring.stringify(content);
        const urlObj = URL.parse(url);
        const options = {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Content-Length': _content.length
            },
            hostname: urlObj.hostname,
            port: urlObj.port,
            path: urlObj.path
        };

        return new Promise((resolve, reject) => {
            console.log('new HTTP POST:', url);
            const req = http.request(options, function(res) {
                resHandler(res, resolve, reject);
            });

            req.on('error', reject);

            req.write(_content);
            req.end();
        });
    }
    _urlFilter(url) {
        let result = url;
        const urlObj = URL.parse(url);
        if(urlObj.hostname === null && urlObj.port === null) {
            urlObj.hostname = this._hostname;
            urlObj.port = this._port;
            urlObj.protocol = 'http';
            urlObj.slashes = true;

            result = URL.format(urlObj);
        }

        return result;
    }
    _urlStubFilter(url) {
        let result = url;
        const urlObj = URL.parse(url);
        if(urlObj.hostname === null && urlObj.port === null) {
            urlObj.hostname = this._stubHostname;
            urlObj.port = this._stubPort;
            urlObj.protocol = 'http';
            urlObj.slashes = true;
            urlObj.pathname = '/stub' + urlObj.pathname;

            result = URL.format(urlObj);
        }

        return result;
    }
}

function resHandler(res, resolve, reject) {
    res.setEncoding('utf8');
    let body = '';
    res.on('data', function(chunk) {
        body += chunk;
    });
    res.on('end', function() {
        let json;
        try {
            json = JSON.parse(body);
        } catch(e) {
            console.log(body);
            reject(e);
            return;
        }

        if(json.result_code === 0) {
            resolve(json.data);
        } else {
            reject(json);
        }
    });
    res.on('error', reject);
}
