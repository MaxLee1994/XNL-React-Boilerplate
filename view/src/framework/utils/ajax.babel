/**
 * @fileOverview client-side ajax 请求, 依赖Jquery.ajax, 产出promise对象
 *               自动解析JSON数据，服务器返回的数据结构顶层为{result_code: int(0为成功，其余为错误码), data/error}
 *               附带桩方法
 * @author Max
 **/

/* jshint -W030 */
import $ from '$';
import URL from 'url';

export default class AJAX {
    constructor({hostname, port, stubHostname, stubPort}) {
        this._hostname = hostname;
        this._port = port;
        this._stubHostname = stubHostname;
        this._stubPort = stubPort;
    }
    get(url) {
        return this._getPromise(this._urlFilter(url));
    }
    getStub(url) {
        return this._getPromise(this._urlStubFilter(url));
    }
    _getPromise(url) {
        return new Promise((resolve, reject) => {
            $.get(url, data => {
                handleData(data, resolve, reject);
            });
        });
    }
    post(url, content) {
        return this._postPromise(this._urlFilter(url), content);
    }
    postStub(url, content) {
        return this._postPromise(this._urlStubFilter(url), content);
    }
    _postPromise(url, content) {
        return new Promise((resolve, reject) => {
            $.post(url, content, data => {
                handleData(data, resolve, reject);
            });
        });
    }
    _urlFilter(url) {
        let result = url;
        const urlObj = URL.parse(url);
        if(urlObj.hostname === null && urlObj.port === null) {
            urlObj.hostname = this._hostname;
            urlObj.port = this._port;
            urlObj.protocol = 'http';
            urlObj.slashes = true;

            result = URL.format(urlObj);
        }

        return result;
    }
    _urlStubFilter(url) {
        let result = url;
        const urlObj = URL.parse(url);

        if(urlObj.hostname === null && urlObj.port === null) {
            urlObj.hostname = this._stubHostname;
            urlObj.port = this._stubPort;
            urlObj.protocol = 'http';
            urlObj.slashes = true;
            urlObj.pathname = '/stub' + urlObj.pathname;

            result = URL.format(urlObj);
        }

        return result;
    }
}

function handleData(data, resolve, reject) {
    let json;
    if(typeof data !== 'object') {
        try {
            json = JSON.parse(data);
        } catch(e) {
            console.log(json);
            reject(e);
            return;
        }
    } else {
        json = data;
    }

    if(json.result_code === 0) {
        resolve(json.data);
    } else {
        reject(json);
    }
}
