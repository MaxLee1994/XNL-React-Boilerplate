/**
 * @fileOverview 页面入口
 * @author Max
 **/

import React from 'react';
import ReactDOM from 'react-dom';
import {Provider} from 'react-redux';
import {routes} from './routes';
import {match, Router, browserHistory} from 'react-router';
import {compose, createStore, applyMiddleware} from 'redux';
import APP from '../../a-reducer/app';
import promiseMiddleware from 'redux-promise';
import Immutable from 'immutable';
import ValidatorMiddleware from 'redux-validator';
import ThunkMiddleware from 'redux-thunk';
import retina from '../../utils/retina';
retina();

import AJAX from '../utils/ajax';
import Storage from '../utils/storage';
window._ajax= new AJAX({
    hostname: __API_SERVER_AJAX_HOSTNAME__,
    port: __API_SERVER_AJAX_PORT__,
    stubHostname: __STUB_SERVER_AJAX_HOSTNAME__,
    stubPort: __STUB_SERVER_AJAX_PORT__
});
window._storage = Storage;

let finalCreateStore, devTools;
if(__WEBPACK_DEV__) {
    const createDevTools = require('redux-devtools').createDevTools;
    const LogMonitor = require('redux-devtools-log-monitor').default;
    const DockMonitor = require('redux-devtools-dock-monitor').default;
    devTools = createDevTools(
        <DockMonitor toggleVisibilityKey='ctrl-h' changePositionKey='ctrl-q' defaultIsVisible={false}>
            <LogMonitor theme='tomorrow' />
        </DockMonitor>
    );
    const persistState = require('redux-devtools').persistState;
    const getDebugSessionKey = () => {
        const matches = window.location.href.match(/[?&]debug_session=([^&]+)\b/);
        return (matches && matches.length > 0)? matches[1] : null;
    };
    const createLogger = require('redux-logger');
    finalCreateStore = compose(
       applyMiddleware(ValidatorMiddleware(), ThunkMiddleware, promiseMiddleware, createLogger({
           stateTransformer: state => {
               if (Immutable.Iterable.isIterable(state))
                   return state.toJS();
               else
                   return state;
           }
       })),
       devTools.instrument(),
       persistState(getDebugSessionKey())
   )(createStore);
} else {
    finalCreateStore = compose(
       applyMiddleware(ValidatorMiddleware(), ThunkMiddleware, promiseMiddleware)
   )(createStore);
}

let initialState = JSON.parse(unescape(__INITIAL_STATE__));
for(let i in initialState) {
    initialState[i] = Immutable.fromJS(initialState[i]);
}

const store = finalCreateStore(APP, initialState);

const customProps = {
    __MOBILE__: __MOBILE__,
    __PHONE__: __PHONE__,
    __TABLET__: __TABLET__,
    devTools: devTools
};
const createElement = (Component, props) => {
    let newProps = props;
    for(let i in customProps) {
        newProps[i] = customProps[i];
    }
    return React.createElement(Component, newProps);
};

match({ history: browserHistory, routes }, (error, redirectLocation, renderProps) => {
    ReactDOM.render((
        <Provider store={store}>
            <Router createElement={createElement} {...renderProps} />
        </Provider>
    ), document.getElementById('root'));
});
